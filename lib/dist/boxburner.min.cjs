"use strict";class t{}function e(t,e){if(e.length<=0)throw new Error(`${t}: Cannot have empty list of commands for closed path`);const n=e[e.length-1].to;if(0!==n[0]||0!==n[1])throw new Error(`${t}: Closed path must end on [0, 0]`)}function n(t){let e=0;for(let n=0;n<t.length;n++){const o=t[n].to,r=t[(n+1)%t.length].to;e+=(r[0]-o[0])*(r[1]+o[1])}return e<0}function o(t,e,n,o){const r=(r,s)=>t[r]*(1-s)*(1-s)*(1-s)+3*e[r]*s*(1-s)*(1-s)+3*n[r]*s*s*(1-s)+o[r]*s*s*s,s=s=>{const a=3*o[s]-9*n[s]+9*e[s]-3*t[s],i=6*t[s]-12*e[s]+6*n[s],d=3*e[s]-3*t[s];let c=Math.min(t[s],o[s]),h=Math.max(t[s],o[s]);if(Math.abs(a)<=1e-8){const t=-d/i;if(t>0&&t<1){const e=r(s,t);c=Math.min(c,e),h=Math.max(h,e)}}else{const t=i*i-4*a*d;if(t>=0){const e=Math.sqrt(t),n=(-i+e)/(2*a);if(n>0&&n<1){const t=r(s,n);c=Math.min(c,t),h=Math.max(h,t)}const o=(-i-e)/(2*a);if(o>0&&o<1){const t=r(s,o);c=Math.min(c,t),h=Math.max(h,t)}}}return[c,h]},a=s(0),i=s(1);return[[a[0],i[0]],[a[1],i[1]]]}class r{constructor(t,o,r=[],s=[],a=[],i=[]){if(e("Surface border",o),!n(o))throw new Error("Surface border: Points must be in counter-clockwise order for border");for(let t=0;t<r.length;t++){const o=`Surface hole ${t}`;if(e(o,r[t].commands),n(r[t].commands))throw new Error(`${o}: Points must be in clockwise order for holes`)}this.thickness=t,this.border=o,this.holes=r,this.cuts=s,this.scores=a,this.text=i}borderBoundingBox(){return function(t){let e=[0,0],n=[0,0],r=[0,0];for(const s of t){switch(s.kind){case"L":e[0]=Math.min(e[0],s.to[0]),e[1]=Math.min(e[1],s.to[1]),n[0]=Math.max(n[0],s.to[0]),n[1]=Math.max(n[1],s.to[1]);break;case"C":{const t=o(r,s.c1,s.c2,s.to);e[0]=Math.min(e[0],t[0][0]),e[1]=Math.min(e[1],t[0][1]),n[0]=Math.max(n[0],t[1][0]),n[1]=Math.max(n[1],t[1][1]);break}}r=s.to}return[e,n]}(this.border)}}var s;exports.AlongIntersection=void 0,(s=exports.AlongIntersection||(exports.AlongIntersection={}))[s.BeforeStart=0]="BeforeStart",s[s.EqualStart=1]="EqualStart",s[s.BetweenStartAndEnd=2]="BetweenStartAndEnd",s[s.EqualEnd=3]="EqualEnd",s[s.AfterEnd=4]="AfterEnd";const a=1e-7;function i(t){return[t[0],t[1]]}function d(t,e,n){return e=(e%360+360)%360,0!==n&&(0===e?t[0]+=n:90===e?t[1]+=n:180===e?t[0]-=n:270===e?t[1]-=n:(t[0]+=n*Math.cos(e*Math.PI/180),t[1]+=n*Math.sin(e*Math.PI/180))),t}function c(t,e,n,o){const r=e[0]-t[0],s=e[1]-t[1],i=o[0]-n[0],d=o[1]-n[1],c=r*d-s*i;if(Math.abs(c)<a)return null;const h=t[0]-n[0],l=t[1]-n[1],f=(i*l-d*h)/c,u=(r*l-s*h)/c,m=t=>t<=-a?exports.AlongIntersection.BeforeStart:t<a?exports.AlongIntersection.EqualStart:t-1<=-a?exports.AlongIntersection.BetweenStartAndEnd:t-1<a?exports.AlongIntersection.EqualEnd:exports.AlongIntersection.AfterEnd,p=[t[0]+f*r,t[1]+f*s];return{alongA:m(f),alongB:m(u),p:p}}function h(t,e,n){if(n<=0)return{offset:t,commands:e};const o=i(t),r=[],s=t=>{const o=e[t],r=e[0===t?e.length-1:t-1],s=Math.atan2(r.to[1]-o.to[1],r.to[0]-o.to[0]),a=s+Math.PI/2;return{angle:s,offset:[n*Math.cos(a),n*Math.sin(a)]}},a=[];for(let t=0;t<e.length;t++){const o=e[t],i=e[(t+e.length-1)%e.length],{angle:d,offset:[c,h]}=s(t);switch(o.kind){case"L":{const{angle:l,offset:[f,u]}=s((t+e.length-1)%e.length),m=Math.min(Math.abs(d-l),Math.abs(d+2*Math.PI-l),Math.abs(d-(l+2*Math.PI))),p=4*n*Math.tan(m/4)/3;a.push(r.length),r.push({kind:"C",c1:[i.to[0]+f-p*Math.cos(l),i.to[1]+u-p*Math.sin(l)],c2:[i.to[0]+c+p*Math.cos(d),i.to[1]+h+p*Math.sin(d)],to:[i.to[0]+c,i.to[1]+h]}),r.push({kind:"L",to:[o.to[0]+c,o.to[1]+h]});break}case"C":r.push({kind:"C",c1:[o.c1[0]+c,o.c1[1]+h],c2:[o.c2[0]+c,o.c2[1]+h],to:[o.to[0]+c,o.to[1]+h]})}}for(const t of a){const e=r[(t+r.length-2)%r.length],n=r[(t+r.length-1)%r.length],o=r[t],s=r[(t+1)%r.length];if("L"===n.kind&&"C"===o.kind&&"L"===s.kind){const t=c(e.to,n.to,o.to,s.to);t&&t.alongA===exports.AlongIntersection.BetweenStartAndEnd&&t.alongB===exports.AlongIntersection.BetweenStartAndEnd&&(o.c1=n.to,o.c2=o.to,n.to=i(t.p),o.to=i(t.p))}}const[d,h]=r[r.length-1].to;o[0]+=d,o[1]+=h;for(const t of r)switch(t.kind){case"L":t.to[0]-=d,t.to[1]-=h;break;case"C":t.c1[0]-=d,t.c1[1]-=h,t.c2[0]-=d,t.c2[1]-=h,t.to[0]-=d,t.to[1]-=h}return{offset:o,commands:r}}class l{constructor(){this.commands=[],this.angle=0}cursor(){return this.commands.length<=0?[0,0]:this.commands[this.commands.length-1].to}lineTo(t){var e,n;const o=this.commands[this.commands.length-1];if(o&&"L"===o.kind){const r=null!==(n=null===(e=this.commands[this.commands.length-2])||void 0===e?void 0:e.to)&&void 0!==n?n:[0,0],s=o.to,i=t;if(Math.abs(r[0]-i[0])<a&&Math.abs(r[1]-i[1])<a)return this.commands.pop(),this;const d=r[0]-s[0],c=r[1]-s[1],h=s[0]-i[0],l=s[1]-i[1];if(Math.abs(d*l-h*c)<a)return o.to=t,this}return this.commands.push({kind:"L",to:t}),this}lineToRelative(t){const e=this.cursor();return this.lineTo([e[0]+t[0],e[1]+t[1]])}quadCurveTo(t,e){const n=this.cursor();return this.curveTo([n[0]+2*(t[0]-n[0])/3,n[1]+2*(t[1]-n[1])/3],[e[0]+2*(t[0]-e[0])/3,e[1]+2*(t[1]-e[1])/3],e)}curveTo(t,e,n){return this.commands.push({kind:"C",c1:t,c2:e,to:n}),this}turn(t){return this.angle=((this.angle+t)%360+360)%360,this}forward(t){return 0!==t&&this.lineToRelative(d([0,0],this.angle,t)),this}close(){var t,e;this.lineTo([0,0]);const n=this.commands[0],o=this.commands[this.commands.length-1];if("L"===(null==o?void 0:o.kind)&&"L"===(null==n?void 0:n.kind)){const r=null!==(e=null===(t=this.commands[this.commands.length-2])||void 0===t?void 0:t.to)&&void 0!==e?e:[0,0],s=o.to,i=n.to,d=r[0]-s[0],c=r[1]-s[1],h=s[0]-i[0],l=s[1]-i[1];if(Math.abs(r[0]-i[0])<a&&Math.abs(r[1]-i[1])<a)this.commands.shift();else if(Math.abs(d*l-h*c)>=a)return this;this.commands.pop();for(const t of this.commands)t.to[0]-=r[0],t.to[1]-=r[1],"C"===t.kind&&(t.c1[0]-=r[0],t.c1[1]-=r[1],t.c2[0]-=r[0],t.c2[1]-=r[1])}return this}build(){return this.commands}}class f{constructor(){this.border=new l,this.holes=[],this.cuts=[],this.scores=[],this.text=[]}hole(t,e=0){const n=new l;return n.turn(e),this.holes.push({offset:t,db:n}),n}cut(t,e=0){const n=new l;return n.turn(e),this.cuts.push({offset:t,db:n}),n}score(t,e=0){const n=new l;return n.turn(e),this.scores.push({offset:t,db:n}),n}build(t){return new r(t,this.border.close().build(),this.holes.map((({offset:t,db:e})=>({offset:t,commands:e.close().build()}))),this.cuts.map((({offset:t,db:e})=>({offset:t,commands:e.close().build()}))),this.scores.map((({offset:t,db:e})=>({offset:t,commands:e.close().build()}))),this.text)}}class u{}class m extends u{name(){return"ButtJoint"}schema(){return{properties:{invert:{type:"boolean",metadata:{default:!1,title:"Invert",description:"Swap settings for receiving side"}},length1:{type:"float64",metadata:{default:0,title:"Length 1",description:"Length of butt 1 (multiples of material thickness)"}},length2:{type:"float64",metadata:{default:1,title:"Length 2",description:"Length of butt 2 (multiples of material thickness)"}}},metadata:{order:["invert","length1","length2"]}}}thickness(t,e,{thickness:n},{length1:o,length2:r,invert:s}){return(e!==s?-r:o)*n}draw(t,e,n,{thickness:o},{invert:r,length1:s,length2:a}){const i=n!==r,d=(i?a:s)*o,c=i?-90:90;t.border.turn(-c).forward(d).turn(c).forward(e).turn(c).forward(d).turn(-c)}}class p extends u{name(){return"BoxJoint"}schema(){return{properties:{invert:{type:"boolean",metadata:{default:!1,title:"Invert",description:"Swap settings for receiving side"}},width1:{type:"float64",metadata:{default:6,title:"Width 1",description:"Width of finger 1 (units)"}},length1:{type:"float64",metadata:{default:1,title:"Length 1",description:"Length of finger 1 (multiples of material thickness)"}},width2:{type:"float64",metadata:{default:6,title:"Width 2",description:"Width of finger 2 (units)"}},length2:{type:"float64",metadata:{default:1,title:"Length 2",description:"Length of finger 2 (multiples of material thickness)"}},play:{type:"float64",metadata:{default:0,title:"Play",description:"Extra space around fingers (units)"}},cornerDistance:{type:"float64",metadata:{default:12,title:"Corner Distance",description:"Reserved space near corners to exclude fingers (units)"}},centerDistance:{type:"float64",metadata:{default:0,title:"Center Distance",description:"Reserved space near center to exclude fingers (units)"}}},metadata:{order:["invert","width1","length1","width2","length2","play","cornerDistance","centerDistance"]}}}thickness(t,e,{thickness:n},{length1:o,length2:r,invert:s}){return(e!==s?-r:o)*n}draw(t,e,n,{thickness:o},{invert:r,width1:s,length1:a,width2:i,length2:d,play:c,cornerDistance:h,centerDistance:l}){const f=t.border,u=n!==r,m=(u?d:a)*o,p=u?s+c:s-c,g=u?i-c:i+c,w=u?-90:90,b=()=>f.turn(-w).forward(m).turn(w).forward(p).turn(w).forward(m).turn(-w),x=t=>{b();for(let e=0;e<t;e++)f.forward(g),b()},k=e-2*h;if(l>0){const t=(k-l)/2,e=Math.floor((t-s)/(s+i)),n=s+e*(s+i);f.forward(h+(t-n)/2),x(e),f.forward(l+t-n),x(e),f.forward(h+(t-n)/2)}else{const t=Math.floor((k-s)/(s+i)),e=s+t*(s+i);f.forward(h+(k-e)/2),x(t),f.forward(h+(k-e)/2)}}}class g extends u{name(){return"MortiseAndTenonJoint"}schema(){return{properties:{invert:{type:"boolean",metadata:{default:!1,title:"Invert",description:"Swap settings for receiving side"}},width1:{type:"float64",metadata:{default:6,title:"Width 1",description:"Width of tenon (units)"}},tenonLength:{type:"float64",metadata:{default:1,title:"Tenon Length",description:"Length of tenon (multiples of material thickness)"}},width2:{type:"float64",metadata:{default:6,title:"Width 2",description:"Width between tenons (units)"}},holeDistance:{type:"float64",metadata:{default:3,title:"Hole Distance",description:"Distance of mortises from edge (units)"}},play:{type:"float64",metadata:{default:0,title:"Play",description:"Extra space between mortise and tenons (units)"}},thicknessPlay:{type:"float64",metadata:{default:0,title:"Thickness Play",description:"Extra thickness added to mortise holes (units)"}},cornerDistance:{type:"float64",metadata:{default:12,title:"Corner Distance",description:"Reserved space near corners to exclude joints (units)"}},centerDistance:{type:"float64",metadata:{default:0,title:"Center Distance",description:"Reserved space near center to exclude joints (units)"}}},metadata:{order:["invert","width1","tenonLength","width2","holeDistance","play","thicknessPlay","cornerDistance","centerDistance"]}}}thickness(t,e,{thickness:n},{tenonLength:o,invert:r}){return e!==r?0:o*n}draw(t,e,n,{thickness:o},{invert:r,width1:s,tenonLength:a,width2:c,holeDistance:h,play:l,thicknessPlay:f,cornerDistance:u,centerDistance:m}){const p=n!==r,g=p?s+l:s-l,w=p?c-l:c+l;let b=t=>{},x=()=>{},k=()=>{};const y=t=>{x();for(let e=0;e<t;e++)k(),x()};if(p){const n=o+2*f,r=i(t.border.cursor()),s=t.border.angle;d(r,s+90,h+n-f),t.border.forward(e),b=t=>{d(r,s,t)},x=()=>{t.hole(i(r),s).forward(g).turn(-90).forward(n).turn(-90).forward(g).turn(-90).forward(n).turn(-90),b(g)},k=()=>b(w)}else{const e=a*o,n=90;b=e=>t.border.forward(e),x=()=>t.border.turn(-n).forward(e).turn(n).forward(g).turn(n).forward(e).turn(-n),k=()=>t.border.forward(w)}const M=e-2*u;if(m>0){const t=(M-m)/2,e=Math.floor((t-s)/(s+c)),n=s+e*(s+c);b(u+(t-n)/2),y(e),b(m+t-n),y(e),b(u+(t-n)/2)}else{const t=Math.floor((M-s)/(s+c)),e=s+t*(s+c);b(u+(M-e)/2),y(t),b(u+(M-e)/2)}}}const w=[new m,new p,new g];function b(t={}){return{discriminator:"kind",mapping:w.map((t=>({[t.name()]:{properties:{kind:{type:"string",metadata:{default:t.name(),title:t.name()}},params:t.schema()},metadata:{order:["params"],untabParams:!0}}}))).reduce(((t,e)=>({...t,...e})),{}),metadata:{default:w[0].name(),order:w.map((t=>t.name())),...t}}}class x extends t{name(){return"Rectangle"}schema(){return{properties:{width:{type:"float64",metadata:{default:100,title:"Outer Width (units)"}},height:{type:"float64",metadata:{default:100,title:"Outer Height (units)"}},edge1:b({title:"Top"}),edge2:b({title:"Right"}),edge3:b({title:"Bottom"}),edge4:b({title:"Left"})},metadata:{order:["width","height","edge1","edge2","edge3","edge4"]}}}generate(t,{width:e,height:n,edge1:o,edge2:r,edge3:s,edge4:a}){const{thickness:i}=t,d=new f,c=w.find((t=>t.name()===o.kind));if(!c)throw new Error("Bad top edge");const h=w.find((t=>t.name()===r.kind));if(!h)throw new Error("Bad right edge");const l=w.find((t=>t.name()===s.kind));if(!l)throw new Error("Bad bottom edge");const u=w.find((t=>t.name()===a.kind));if(!u)throw new Error("Bad left edge");const m=c.thickness(e,!1,t,o.params),p=h.thickness(n,!1,t,r.params),g=l.thickness(e,!1,t,s.params),b=u.thickness(n,!1,t,a.params);return e-=Math.abs(p)+Math.abs(b),n-=Math.abs(m)+Math.abs(g),b<0&&d.border.forward(-b),c.draw(d,e,!1,t,o.params),p<0&&d.border.forward(-p),d.border.turn(90),m<0&&d.border.forward(-m),h.draw(d,n,!1,t,r.params),g<0&&d.border.forward(-g),d.border.turn(90),p<0&&d.border.forward(-p),l.draw(d,e,!1,t,s.params),b<0&&d.border.forward(-b),d.border.turn(90),g<0&&d.border.forward(-g),u.draw(d,n,!1,t,a.params),m<0&&d.border.forward(-m),d.border.turn(90),[d.build(i)]}}class k extends t{name(){return"PlainBox"}schema(){return{properties:{width:{type:"float64",metadata:{default:100,title:"Outer Width (units)"}},depth:{type:"float64",metadata:{default:100,title:"Outer Depth (units)"}},height:{type:"float64",metadata:{default:100,title:"Outer Height (units)"}},holeDistance:{type:"float64",metadata:{default:3,title:"Hole Distance",description:"Distance of mortises from edge (units)"}},play:{type:"float64",metadata:{default:0,title:"Play",description:"Extra space between fingers (units)"}},thicknessPlay:{type:"float64",metadata:{default:0,title:"Thickness Play",description:"Extra thickness added to mortise holes (units)"}}},metadata:{order:["width","depth","height","holeDistance","play","thicknessPlay"]}}}generate(t,{width:e,depth:n,height:o,holeDistance:r,play:s,thicknessPlay:a}){const{thickness:i}=t,d=new x,c=t=>({kind:"MortiseAndTenonJoint",params:{invert:t,width1:2*i,tenonLength:1,width2:2*i,holeDistance:r,play:s,thicknessPlay:a,cornerDistance:2*i,centerDistance:0}}),h=t=>({kind:"BoxJoint",params:{invert:t,width1:2*i,length1:1,width2:2*i,length2:1,play:s,cornerDistance:2*i,centerDistance:0}});return[...d.generate(t,{width:e,height:n,edge1:c(!1),edge2:c(!1),edge3:c(!1),edge4:c(!1)}),...d.generate(t,{width:e,height:o,edge1:{kind:"ButtJoint",params:{invert:!1,length1:0,length2:1}},edge2:h(!1),edge3:c(!0),edge4:h(!1)}),...d.generate(t,{width:e,height:o,edge1:{kind:"ButtJoint",params:{invert:!1,length1:0,length2:1}},edge2:h(!1),edge3:c(!0),edge4:h(!1)}),...d.generate(t,{width:e,height:o,edge1:{kind:"ButtJoint",params:{invert:!1,length1:0,length2:1}},edge2:h(!0),edge3:c(!0),edge4:h(!0)}),...d.generate(t,{width:e,height:o,edge1:{kind:"ButtJoint",params:{invert:!1,length1:0,length2:1}},edge2:h(!0),edge3:c(!0),edge4:h(!0)})]}}const y=[new x,new k];class M{constructor(t){}}class v extends M{constructor(t){super(t),this.surfaces=[],this.settings=t}addSurface(t,e,n,o,r){this.surfaces.push({offset:t,surface:e,cutColor:n,holeColor:o,scoreColor:r})}toFile(){const{kerf:t,units:e}=this.settings,n=[[0,0],[0,0]];for(const{offset:e,surface:o}of this.surfaces){const r=o.borderBoundingBox();n[0][0]=Math.min(n[0][0],e[0]+r[0][0]-t-10),n[0][1]=Math.min(n[0][1],e[1]+r[0][1]-t-10),n[1][0]=Math.max(n[1][0],e[0]+r[1][0]+t+10),n[1][1]=Math.max(n[1][1],e[1]+r[1][1]+t+10)}const o=[],r=t=>""+Math.round(1e3*t)/1e3;let s=0;const a=()=>{o.push(`<g id="p-${s++}" style="fill:none;stroke-linecap:round;stroke-linejoin:round;">`)},i=()=>{o.push("</g>")},d=(e,n,s,a)=>{s&&t>0&&({offset:e,commands:n}=h(e,n,t));const i=[`M${r(e[0])} ${r(e[1])}`];for(const t of n)switch(t.kind){case"L":i.push(`L${r(e[0]+t.to[0])} ${r(e[1]+t.to[1])}`);break;case"C":i.push(`C${r(e[0]+t.c1[0])} ${r(e[1]+t.c1[1])}`,` ${r(e[0]+t.c2[0])} ${r(e[1]+t.c2[1])}`,` ${r(e[0]+t.to[0])} ${r(e[1]+t.to[1])}`)}s&&i.push("Z"),o.push(`<path stroke="${a}" stroke-width="${t<=0?.1:t}" d="${i.join("")}" />`)};for(const{offset:t,surface:e,cutColor:n,holeColor:o,scoreColor:r}of this.surfaces){if((e.scores.length>0||e.holes.length>0)&&a(),e.scores.length>0){a();for(const n of e.scores)d([t[0]+n.offset[0],t[1]+n.offset[1]],n.commands,!1,r);i()}a(),d(t,e.border,!0,n);for(const o of e.cuts)d([t[0]+o.offset[0],t[1]+o.offset[1]],o.commands,!1,n);if(i(),e.holes.length>0){a();for(const n of e.holes)d([t[0]+n.offset[0],t[1]+n.offset[1]],n.commands,!0,o);i()}(e.scores.length>0||e.holes.length>0)&&i()}const c=n[1][0]-n[0][0],l=n[1][1]-n[0][1];return{mimeType:"image/svg+xml",extension:".svg",data:(new TextEncoder).encode(`<?xml version='1.0' encoding='utf-8'?>\n<svg\n  width="${r(c)}${e}"\n  height="${r(l)}${e}"\n  viewBox="${r(n[0][0])} ${r(n[0][1])} ${r(c)} ${r(l)}"\n  xmlns="http://www.w3.org/2000/svg">\n\x3c!--\nGenerated by boxburner\nby Sean Connelly (@velipso), https://sean.fun\nProject Home: https://github.com/velipso/boxburner\nSPDX-License-Identifier: 0BSD\n--\x3e\n${o.join("")}\n</svg>`)}}}exports.BoxJoint=p,exports.ButtJoint=m,exports.DocumentBase=M,exports.DocumentSVG=v,exports.DrawBuilder=l,exports.EdgeBase=u,exports.GeneratorBase=t,exports.MortiseAndTenonJoint=g,exports.PlainBox=k,exports.Rectangle=x,exports.SettingsTypeDef={properties:{thickness:{type:"float64",metadata:{default:3,title:"Material Thickness (units)"}},kerf:{type:"float64",metadata:{default:.1,title:"Kerf",description:"Thickness of material removed by cutting tool (units)"}},units:{enum:["mm","in"],metadata:{default:"mm",title:"Units"}},fileFormat:{enum:["svg"],metadata:{default:"svg",title:"File Format"}},debug:{type:"boolean",metadata:{default:!1,title:"Debug"}}},metadata:{title:"Settings",order:["thickness","kerf","units","fileFormat","debug"],startHidden:!0}},exports.Surface=r,exports.SurfaceBuilder=f,exports.allEdges=w,exports.allEdgesTypeDef=b,exports.allGenerators=y,exports.copyVec2=i,exports.eps=a,exports.expandPathByKerf=h,exports.exportDocument=function(t){if("svg"===t.fileFormat)return new v(t);throw new Error(`Unknown export file format: ${t.fileFormat}`)},exports.forwardVec2=d,exports.linesIntersect=c;
