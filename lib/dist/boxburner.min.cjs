"use strict";class t{}function e(t,e){if(e.length<=0)throw new Error(`${t}: Cannot have empty list of commands for closed path`);const a=e[e.length-1].to;if(0!==a[0]||0!==a[1])throw new Error(`${t}: Closed path must end on [0, 0]`)}function a(t){let e=0;for(let a=0;a<t.length;a++){const n=t[a].to,s=t[(a+1)%t.length].to;e+=(s[0]-n[0])*(s[1]+n[1])}return e<0}function n(t,e,a,n){const s=(s,i)=>t[s]*(1-i)*(1-i)*(1-i)+3*e[s]*i*(1-i)*(1-i)+3*a[s]*i*i*(1-i)+n[s]*i*i*i,i=i=>{const o=3*n[i]-9*a[i]+9*e[i]-3*t[i],r=6*t[i]-12*e[i]+6*a[i],l=3*e[i]-3*t[i];let h=Math.min(t[i],n[i]),d=Math.max(t[i],n[i]);if(Math.abs(o)<=1e-8){const t=-l/r;if(t>0&&t<1){const e=s(i,t);h=Math.min(h,e),d=Math.max(d,e)}}else{const t=r*r-4*o*l;if(t>=0){const e=Math.sqrt(t),a=(-r+e)/(2*o);if(a>0&&a<1){const t=s(i,a);h=Math.min(h,t),d=Math.max(d,t)}const n=(-r-e)/(2*o);if(n>0&&n<1){const t=s(i,n);h=Math.min(h,t),d=Math.max(d,t)}}}return[h,d]},o=i(0),r=i(1);return[[o[0],r[0]],[o[1],r[1]]]}class s{constructor(t,n,s=[],i=[],o=[]){if(e("Surface border",n),!a(n))throw new Error("Surface border: Points must be in counter-clockwise order for border");for(let t=0;t<s.length;t++){const n=`Surface hole ${t}`;if(e(n,s[t]),a(s[t]))throw new Error(`${n}: Points must be in clockwise order for holes`)}this.thickness=t,this.border=n,this.holes=s,this.cuts=i,this.text=o}borderBoundingBox(){return function(t){let e=[0,0],a=[0,0],s=[0,0];for(const i of t){switch(i.kind){case"L":e[0]=Math.min(e[0],i.to[0]),e[1]=Math.min(e[1],i.to[1]),a[0]=Math.max(a[0],i.to[0]),a[1]=Math.max(a[1],i.to[1]);break;case"C":{const t=n(s,i.c1,i.c2,i.to);e[0]=Math.min(e[0],t[0][0]),e[1]=Math.min(e[1],t[0][1]),a[0]=Math.max(a[0],t[1][0]),a[1]=Math.max(a[1],t[1][1]);break}}s=i.to}return[e,a]}(this.border)}}class i{constructor(){this.commands=[],this.angle=0}cursor(){return this.commands.length<=0?[0,0]:this.commands[this.commands.length-1].to}lineTo(t){return this.commands.push({kind:"L",to:t}),this}lineToRelative(t){const e=this.cursor();return this.lineTo([e[0]+t[0],e[1]+t[1]])}quadCurveTo(t,e){const a=this.cursor();return this.curveTo([a[0]+2*(t[0]-a[0])/3,a[1]+2*(t[1]-a[1])/3],[e[0]+2*(t[0]-e[0])/3,e[1]+2*(t[1]-e[1])/3],e)}curveTo(t,e,a){return this.commands.push({kind:"C",c1:t,c2:e,to:a}),this}forward(t,e=0){this.angle+=t;const a=this.angle*Math.PI/180;return 0!==e&&this.lineToRelative([e*Math.sin(a),e*Math.cos(a)]),this}close(){const t=this.cursor();return 0===t[0]&&0===t[1]||this.lineTo([0,0]),this}build(){return this.commands}}class o extends t{name(){return"PlainBox"}defaultParams(){return{thickness:3,edges:[{kind:"boxJoint",length:100,angle:90,surroundingSpaces:2,edgeWidth:1,extraLength:0,finger:2,play:0,space:2,width:1},{kind:"plain",length:50},{kind:"boxJoint",length:100,angle:90,surroundingSpaces:2,edgeWidth:1,extraLength:0,finger:2,play:0,space:2,width:1},{kind:"plain",length:50}]}}schema(){return{properties:{thickness:{type:"float64",metadata:{default:3,title:"Thickness (mm)"}},edges:{elements:{discriminator:"kind",mapping:{plain:{properties:{kind:{type:"string",metadata:{default:"plain",title:"Plain"}},length:{type:"float64",metadata:{default:100,title:"Length (mm)"}}},metadata:{title:"Plain",order:["length"]}},boxJoint:{properties:{kind:{type:"string",metadata:{default:"boxJoint",title:"Box Joint"}},length:{type:"float64",metadata:{default:100,title:"Length (mm)"}},angle:{type:"float64",metadata:{default:90,title:"Angle"}},surroundingSpaces:{type:"float64",metadata:{default:2,title:"Surrounding Space"}},edgeWidth:{type:"float64",metadata:{default:1,title:"Edge Width (multiples of thickness)"}},extraLength:{type:"float64",metadata:{default:0,title:"Extra Length (multiples of thickness)"}},finger:{type:"float64",metadata:{default:2,title:"Finger (multiples of thickness)"}},play:{type:"float64",metadata:{default:0,title:"Play (multiples of thickness)"}},space:{type:"float64",metadata:{default:2,title:"Space (multiples of thickness)"}},width:{type:"float64",metadata:{default:1,title:"Width (multiples of thickness)"}}},metadata:{title:"Box Joint",order:["length","angle","surroundingSpaces","edgeWidth","extraLength","finger","play","space","width"]}}},metadata:{default:"plain",order:["plain","boxJoint"]}},metadata:{default:4,title:"Edges",itemTitle:"Edge {}"}}},metadata:{order:["thickness","edges"]}}}generate({thickness:t,edges:e}){if(e.length<3)throw new Error("Need at least 3 edges");const a=new i,n=-360/e.length;for(const t of e){switch(t.kind){case"plain":case"boxJoint":a.forward(0,t.length)}a.forward(n,0)}return[new s(t,a.close().build())]}}exports.DrawBuilder=i,exports.GeneratorBase=t,exports.PlainBox=o,exports.Surface=s,exports.test=function(){const t=new o;console.log(t.schema()),console.log(t.generate({thickness:3,width:50,height:30}))};
