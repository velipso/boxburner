class t{}function e(t,e){if(e.length<=0)throw new Error(`${t}: Cannot have empty list of commands for closed path`);const n=e[e.length-1].to;if(0!==n[0]||0!==n[1])throw new Error(`${t}: Closed path must end on [0, 0]`)}function n(t){let e=0;for(let n=0;n<t.length;n++){const r=t[n].to,a=t[(n+1)%t.length].to;e+=(a[0]-r[0])*(a[1]+r[1])}return e<0}function r(t,e,n,r){const a=(a,o)=>t[a]*(1-o)*(1-o)*(1-o)+3*e[a]*o*(1-o)*(1-o)+3*n[a]*o*o*(1-o)+r[a]*o*o*o,o=o=>{const s=3*r[o]-9*n[o]+9*e[o]-3*t[o],i=6*t[o]-12*e[o]+6*n[o],d=3*e[o]-3*t[o];let l=Math.min(t[o],r[o]),h=Math.max(t[o],r[o]);if(Math.abs(s)<=1e-8){const t=-d/i;if(t>0&&t<1){const e=a(o,t);l=Math.min(l,e),h=Math.max(h,e)}}else{const t=i*i-4*s*d;if(t>=0){const e=Math.sqrt(t),n=(-i+e)/(2*s);if(n>0&&n<1){const t=a(o,n);l=Math.min(l,t),h=Math.max(h,t)}const r=(-i-e)/(2*s);if(r>0&&r<1){const t=a(o,r);l=Math.min(l,t),h=Math.max(h,t)}}}return[l,h]},s=o(0),i=o(1);return[[s[0],i[0]],[s[1],i[1]]]}class a{constructor({defaultThickness:t,defaultKerf:r},a,o=[],s=[],i=[],d=[]){if(this.thicknessValue=null,this.kerfValue=null,e("Surface border",a),!n(a))throw new Error("Surface border: Points must be in counter-clockwise order for border");for(let t=0;t<o.length;t++){const r=`Surface hole ${t}`;if(e(r,o[t].commands),n(o[t].commands))throw new Error(`${r}: Points must be in clockwise order for holes`)}this.defaultThickness=t,this.defaultKerf=r,this.border=a,this.holes=o,this.cuts=s,this.scores=i,this.text=d}setThickness(t){this.thicknessValue=t}setKerf(t){this.kerfValue=t}thickness(){return"number"==typeof this.thicknessValue?this.thicknessValue:this.defaultThickness}kerf(){return"number"==typeof this.kerfValue?this.kerfValue:this.defaultKerf}borderBoundingBox(){return function(t){const e=[0,0],n=[0,0];let a=[0,0];for(const o of t){switch(o.kind){case"L":e[0]=Math.min(e[0],o.to[0]),e[1]=Math.min(e[1],o.to[1]),n[0]=Math.max(n[0],o.to[0]),n[1]=Math.max(n[1],o.to[1]);break;case"C":{const t=r(a,o.c1,o.c2,o.to);e[0]=Math.min(e[0],t[0][0]),e[1]=Math.min(e[1],t[0][1]),n[0]=Math.max(n[0],t[1][0]),n[1]=Math.max(n[1],t[1][1]);break}}a=o.to}return[e,n]}(this.border)}}const o={properties:{defaultThickness:{type:"float64",metadata:{default:3,title:"Default Material Thickness (units)"}},defaultKerf:{type:"float64",metadata:{default:.1,title:"Default Kerf (units)",description:"Thickness of material removed by cutting tool"}},units:{enum:["mm","in"],metadata:{default:"mm",title:"Units"}},fileFormat:{enum:["svg"],metadata:{default:"svg",title:"File Format"}},debug:{type:"boolean",metadata:{default:!1,title:"Debug"}}},metadata:{title:"Settings",order:["defaultThickness","defaultKerf","units","fileFormat","debug"],startHidden:!0}};var s;!function(t){t[t.BeforeStart=0]="BeforeStart",t[t.EqualStart=1]="EqualStart",t[t.BetweenStartAndEnd=2]="BetweenStartAndEnd",t[t.EqualEnd=3]="EqualEnd",t[t.AfterEnd=4]="AfterEnd"}(s||(s={}));const i=1e-7;function d(t){return[t[0],t[1]]}function l(t,e,n){return e=(e%360+360)%360,0!==n&&(0===e?t[0]+=n:90===e?t[1]+=n:180===e?t[0]-=n:270===e?t[1]-=n:(t[0]+=n*Math.cos(e*Math.PI/180),t[1]+=n*Math.sin(e*Math.PI/180))),t}function h(t,e,n,r){const a=e[0]-t[0],o=e[1]-t[1],d=r[0]-n[0],l=r[1]-n[1],h=a*l-o*d;if(Math.abs(h)<i)return null;const c=t[0]-n[0],u=t[1]-n[1],f=(d*u-l*c)/h,g=(a*u-o*c)/h,m=t=>t<=-i?s.BeforeStart:t<i?s.EqualStart:t-1<=-i?s.BetweenStartAndEnd:t-1<i?s.EqualEnd:s.AfterEnd,p=[t[0]+f*a,t[1]+f*o];return{alongA:m(f),alongB:m(g),p:p}}function c(t,e,n){if(n<=0)return{offset:t,commands:e};const r=n/2,a=d(t),o=[],l=t=>{const n=e[t];let a=0;switch(n.kind){case"L":{const r=e[0===t?e.length-1:t-1];a=Math.atan2(r.to[1]-n.to[1],r.to[0]-n.to[0]);break}case"C":a=Math.atan2(n.c2[1]-n.to[1],n.c2[0]-n.to[0])}const o=a+Math.PI/2;return{angle:a,offset:[r*Math.cos(o),r*Math.sin(o)]}},c=[];for(let t=0;t<e.length;t++){const n=e[t],a=e[(t+e.length-1)%e.length],{angle:s,offset:[d,h]}=l(t),{angle:u,offset:[f,g]}=l((t+e.length-1)%e.length);if(Math.abs(s-u)>=i){const t=Math.min(Math.abs(s-u),Math.abs(s+2*Math.PI-u),Math.abs(s-(u+2*Math.PI))),e=4*r*Math.tan(t/4)/3;c.push(o.length),o.push({kind:"C",c1:[a.to[0]+f-e*Math.cos(u),a.to[1]+g-e*Math.sin(u)],c2:[a.to[0]+d+e*Math.cos(s),a.to[1]+h+e*Math.sin(s)],to:[a.to[0]+d,a.to[1]+h]})}switch(n.kind){case"L":o.push({kind:"L",to:[n.to[0]+d,n.to[1]+h]});break;case"C":{const t=Math.atan2(a.to[1]-n.c1[1],a.to[0]-n.c1[0])+Math.PI/2,e=r*Math.cos(t),s=r*Math.sin(t),i=Math.atan2(n.c2[1]-n.to[1],n.c2[0]-n.to[0])+Math.PI/2,d=r*Math.cos(i),l=r*Math.sin(i);o.push({kind:"C",c1:[n.c1[0]+e,n.c1[1]+s],c2:[n.c2[0]+d,n.c2[1]+l],to:[n.to[0]+d,n.to[1]+l]});break}}}for(const t of c){const e=o[(t+o.length-1)%o.length],n=o[t],r=o[(t+1)%o.length];if("C"===n.kind){const a=h("L"===e.kind?o[(t+o.length-2)%o.length].to:e.c2,e.to,n.to,"L"===r.kind?r.to:r.c1);a&&a.alongA===s.BetweenStartAndEnd&&a.alongB===s.BetweenStartAndEnd&&(n.c1=e.to,n.c2=n.to,e.to=d(a.p),n.to=d(a.p))}}const[u,f]=o[o.length-1].to;a[0]+=u,a[1]+=f;for(const t of o)switch(t.kind){case"L":t.to[0]-=u,t.to[1]-=f;break;case"C":t.c1[0]-=u,t.c1[1]-=f,t.c2[0]-=u,t.c2[1]-=f,t.to[0]-=u,t.to[1]-=f}return{offset:a,commands:o}}class u{constructor(){this.commands=[],this.angle=0}cursor(){return this.commands.length<=0?[0,0]:this.commands[this.commands.length-1].to}lineTo(t){var e,n;const r=this.commands[this.commands.length-1];if(r&&"L"===r.kind){const a=null!==(n=null===(e=this.commands[this.commands.length-2])||void 0===e?void 0:e.to)&&void 0!==n?n:[0,0],o=r.to,s=t;if(Math.abs(a[0]-s[0])<i&&Math.abs(a[1]-s[1])<i)return this.commands.pop(),this;const d=a[0]-o[0],l=a[1]-o[1],h=o[0]-s[0],c=o[1]-s[1];if(Math.abs(d*c-h*l)<i)return r.to=t,this}return this.commands.push({kind:"L",to:t}),this}lineToRelative(t){const e=this.cursor();return this.lineTo([e[0]+t[0],e[1]+t[1]])}quadCurveTo(t,e){const n=this.cursor();return this.curveTo([n[0]+2*(t[0]-n[0])/3,n[1]+2*(t[1]-n[1])/3],[e[0]+2*(t[0]-e[0])/3,e[1]+2*(t[1]-e[1])/3],e)}curveTo(t,e,n){return this.commands.push({kind:"C",c1:t,c2:e,to:n}),this}turn(t){return this.angle=((this.angle+t)%360+360)%360,this}forward(t){return 0!==t&&this.lineToRelative(l([0,0],this.angle,t)),this}forwardCurve(t,e,n,r,a){const o=l(d(this.cursor()),this.angle,t);this.turn(e);const s=l(d(o),this.angle,n);this.turn(r);const i=l(d(s),this.angle,a);return this.curveTo(o,s,i),this}close(){var t,e;this.lineTo([0,0]);const n=this.commands[0],r=this.commands[this.commands.length-1];if("L"===(null==r?void 0:r.kind)&&"L"===(null==n?void 0:n.kind)){const a=d(null!==(e=null===(t=this.commands[this.commands.length-2])||void 0===t?void 0:t.to)&&void 0!==e?e:[0,0]),o=r.to,s=n.to,l=a[0]-o[0],h=a[1]-o[1],c=o[0]-s[0],u=o[1]-s[1];if(Math.abs(a[0]-s[0])<i&&Math.abs(a[1]-s[1])<i)this.commands.shift();else if(Math.abs(l*u-c*h)>=i)return[0,0];this.commands.pop();for(const t of this.commands)t.to[0]-=a[0],t.to[1]-=a[1],"C"===t.kind&&(t.c1[0]-=a[0],t.c1[1]-=a[1],t.c2[0]-=a[0],t.c2[1]-=a[1]);return[-a[0],-a[1]]}return[0,0]}build(){return this.commands}}const f={" ":0,"!":74240,'"':516,"#":43580,$:43707,"%":61081,"&":37745,"'":512,"(":5120,")":16640,"*":65280,"+":43520,",":16384,"-":34816,".":65536,"/":17408,0:17663,1:1036,2:34935,3:2111,4:34956,5:35003,6:35067,7:15,8:35071,9:35007,":":8704,";":16896,"<":37888,"=":34864,">":18688,"?":75783,"@":2807,A:35023,B:10815,C:243,D:8767,E:33011,F:32963,G:2299,H:35020,I:8755,J:124,K:38080,L:240,M:1484,N:4556,O:255,P:35015,Q:4351,R:39111,S:35003,T:8707,U:252,V:17600,W:20684,X:21760,Y:35004,Z:17459,"[":8722,"\\":4352,"]":8737,"^":20480,_:48,"`":256,"{":41490,"|":8704,"}":10785,"~":52224};class g{constructor(){this.border=new u,this.holes=[],this.cuts=[],this.scores=[],this.text=[]}hole(t,e=0){const n=new u;return n.turn(e),this.holes.push({offset:t,db:n}),n}cut(t,e=0){const n=new u;return n.turn(e),this.cuts.push({offset:d(t),db:n}),n}score(t,e=0){const n=new u;return n.turn(e),this.scores.push({offset:d(t),db:n}),n}scoreChar(t,e,n,r){var a;const o=null!==(a=f[r.toUpperCase()])&&void 0!==a?a:f["?"],s=(r,a,o,s)=>{const i=d(t);i[0]+=r*e,i[1]+=a*n,this.score(i).lineToRelative([(o-r)*e,(s-a)*n])},i=.025;return 1&o&&s(i,0,.475,0),2&o&&s(.525,0,.975,0),4&o&&s(1,i,1,.475),8&o&&s(1,.525,1,.975),16&o&&s(.975,1,.525,1),32&o&&s(.475,1,i,1),64&o&&s(0,.975,0,.525),128&o&&s(0,.475,0,i),256&o&&s(i,i,.475,.475),512&o&&s(.5,i,.5,.475),1024&o&&s(.975,i,.525,.475),2048&o&&s(.525,.5,.975,.5),4096&o&&s(.525,.525,.975,.975),8192&o&&s(.5,.525,.5,65536&o?.775:.975),16384&o&&s(.475,.525,i,.975),32768&o&&s(.475,.5,i,.5),65536&o&&s(.5,.8+i,.5,.975),this}build(t){const e=this.border.close();return new a(t,this.border.build(),this.holes.map((({offset:t,db:n})=>{const r=n.close();return{offset:[t[0]+e[0]+r[0],t[1]+e[1]+r[1]],commands:n.build()}})),this.cuts.map((({offset:t,db:n})=>({offset:[t[0]+e[0],t[1]+e[1]],commands:n.build()}))),this.scores.map((({offset:t,db:n})=>({offset:[t[0]+e[0],t[1]+e[1]],commands:n.build()}))),this.text)}}class m extends t{name(){return"BoxCardstock"}schema(){return{properties:{thickness:{type:"float64",nullable:!0,metadata:{default:null,defaultNotNull:3,nullHint:"default",title:"Material Thickness (units)"}},kerf:{type:"float64",nullable:!0,metadata:{default:null,defaultNotNull:.1,nullHint:"default",title:"Kerf (units)",description:"Thickness of material removed by cutting tool"}},width:{type:"float64",metadata:{default:100,title:"Interior Width (units)"}},depth:{type:"float64",metadata:{default:100,title:"Interior Depth (units)"}},height:{type:"float64",metadata:{default:20,title:"Interior Height (units)"}},foot:{type:"float64",metadata:{default:10,title:"Foot size (units)"}}},metadata:{order:["thickness","kerf","width","depth","height","foot"]}}}generate(t,{thickness:e,kerf:n,width:r,depth:a,height:o,foot:s}){const i="number"==typeof e?e:t.defaultThickness,d=new g,l=o+i,h=o,c=2*i,u=t=>{const e=.8*t,n=.25*t,r=180*Math.atan2(e,n)/Math.PI;d.border.turn(-r).forward(Math.sqrt(n*n+e*e)).turn(r).forward(.5*t).turn(r).forward(Math.sqrt(n*n+e*e)).turn(-r)},f=t=>{d.border.turn(-45).forward(Math.sqrt(2)*s).turn(45).forward(t-2*s).turn(45).forward(Math.sqrt(2)*s).turn(-45)},m=()=>{d.border.turn(-90),u(l),d.score(d.border.cursor(),d.border.angle).turn(180).forward(l).turn(-90).forward(r+6*i).turn(-90).forward(l),d.border.turn(90).forward(c),d.score(d.border.cursor(),d.border.angle).forward(r+6*i-2*c),d.border.turn(-90).forward(h).turn(90),d.score(d.border.cursor(),d.border.angle).forward(r+6*i-2*c),f(r+6*i-2*c),d.border.turn(90).forward(h).turn(-90).forward(c).turn(90),u(l)},p=()=>{d.border.forward(c),d.score(d.border.cursor(),d.border.angle).forward(a+6*i-2*c),d.border.turn(-90).forward(l).turn(-90),d.score(d.border.cursor(),d.border.angle).turn(180).forward(a+6*i-2*c),d.border.forward(c).turn(90),d.score(d.border.cursor(),d.border.angle).forward(h).turn(90).forward(a+6*i).turn(90).forward(h),u(h),d.border.turn(90),f(a+6*i),d.border.turn(90),u(h),d.border.turn(90).forward(c).turn(-90).forward(l).turn(-90).forward(c).turn(90)};m(),p(),m(),p();const w=d.build(t);"number"==typeof e&&w.setThickness(e),"number"==typeof n&&w.setKerf(n);const b=new g;b.border.forward(r).turn(90).forward(a).turn(90).forward(r).turn(90).forward(a).turn(90);const k=b.build(t);return"number"==typeof e&&k.setThickness(e),"number"==typeof n&&k.setKerf(n),[w,k]}}class p{}class w extends p{thickness(t,e,n){return this.jointThickness(t,!1,e,n)}draw(t,e,n,r){this.jointDraw(t,e,!1,n,r)}}class b extends w{name(){return"BoxJoint"}schema(){return{properties:{invert:{type:"boolean",metadata:{default:!1,title:"Invert",description:"Swap settings for receiving side"}},width1:{type:"float64",metadata:{default:6,title:"Width 1",description:"Width of finger 1 (units)"}},length1:{type:"float64",metadata:{default:1,title:"Length 1",description:"Length of finger 1 (multiples of material thickness)"}},width2:{type:"float64",metadata:{default:6,title:"Width 2",description:"Width of finger 2 (units)"}},length2:{type:"float64",metadata:{default:1,title:"Length 2",description:"Length of finger 2 (multiples of material thickness)"}},play:{type:"float64",metadata:{default:0,title:"Play",description:"Extra space around fingers (units)"}},cornerDistance:{type:"float64",metadata:{default:12,title:"Corner Distance",description:"Reserved space near corners to exclude fingers (units)"}},centerDistance:{type:"float64",metadata:{default:0,title:"Center Distance",description:"Reserved space near center to exclude fingers (units)"}}},metadata:{order:["invert","width1","length1","width2","length2","play","cornerDistance","centerDistance"]}}}jointThickness(t,e,n,{length1:r,length2:a,invert:o}){return(e!==o?-a:r)*n}jointDraw(t,e,n,r,{invert:a,width1:o,length1:s,width2:i,length2:d,play:l,cornerDistance:h,centerDistance:c}){const u=t.border,f=n!==a,g=(f?d:s)*r,m=f?-l:l,p=f?-90:90,w=()=>u.forward(m/2).turn(-p).forward(g).turn(p).forward(o-m).turn(p).forward(g).turn(-p).forward(m/2),b=t=>{if(t>1e4)throw new Error("Too many fingers");w();for(let e=0;e<t;e++)u.forward(i),w()},k=e-2*h;if(c>0){const t=(k-c)/2,e=Math.floor((t-o)/(o+i)),n=o+e*(o+i);u.forward(h+(t-n)/2),b(e),u.forward(c+t-n),b(e),u.forward(h+(t-n)/2)}else{const t=Math.floor((k-o)/(o+i)),e=o+t*(o+i);u.forward(h+(k-e)/2),b(t),u.forward(h+(k-e)/2)}}}class k extends w{name(){return"ButtJoint"}schema(){return{properties:{invert:{type:"boolean",metadata:{default:!1,title:"Invert",description:"Swap settings for receiving side"}},length1:{type:"float64",metadata:{default:0,title:"Length 1",description:"Length of butt 1 (multiples of material thickness)"}},length2:{type:"float64",metadata:{default:1,title:"Length 2",description:"Length of butt 2 (multiples of material thickness)"}}},metadata:{order:["invert","length1","length2"]}}}jointThickness(t,e,n,{length1:r,length2:a,invert:o}){return(e!==o?-a:r)*n}jointDraw(t,e,n,r,{invert:a,length1:o,length2:s}){const i=n!==a,d=(i?s:o)*r,l=i?-90:90;t.border.turn(-l).forward(d).turn(l).forward(e).turn(l).forward(d).turn(-l)}}class y extends p{name(){return"LegEdge"}schema(){return{properties:{flatWidth:{type:"float64",metadata:{default:.1,title:"Flat Width",description:"Flat part of leg (fraction of overall length)"}},curveWidth:{type:"float64",metadata:{default:.15,title:"Curve Width",description:"Curve part of leg (fraction of overall length)"}},curveAmount:{type:"float64",metadata:{default:.05,title:"Curve Amount",description:"How extreme to curve (fraction of overall length)"}},height:{type:"float64",metadata:{default:10,title:"Height (units)"}}},metadata:{order:["flatWidth","curveWidth","curveAmount","height"]}}}thickness(t,e,{height:n}){return-n}draw(t,e,n,{flatWidth:r,curveWidth:a,curveAmount:o,height:s}){const i=o*e;let d=90,l=s;0!==i&&(d=180-180*Math.atan2(s/2,i)/Math.PI,l=2*Math.sqrt(s*s/4+i*i)),t.border.turn(-90).forward(s).turn(90).forward(r*e).forwardCurve(a*e*.5+i,d,l,-d,a*e*.5+i).forward((1-2*(r+a))*e).forwardCurve(a*e*.5+i,-d,l,d,a*e*.5+i).forward(r*e).turn(90).forward(s).turn(-90)}}function v(t,e={},n){return{discriminator:"kind",mapping:t.map((t=>({[t.name()]:{properties:{kind:{type:"string",metadata:{default:t.name(),title:t.name()}},params:t.schema()},metadata:{order:["params"],untabParams:!0}}}))).reduce(((t,e)=>({...t,...e})),{}),nullable:n,metadata:{default:t[0].name(),order:t.map((t=>t.name())),...e}}}const M=[new b,new k,new y];class x extends w{name(){return"MortiseAndTenonJoint"}schema(){return{properties:{invert:{type:"boolean",metadata:{default:!1,title:"Invert",description:"Swap settings for receiving side"}},width1:{type:"float64",metadata:{default:6,title:"Width 1",description:"Width of tenon (units)"}},tenonLength:{type:"float64",metadata:{default:1,title:"Tenon Length",description:"Length of tenon (multiples of material thickness)"}},width2:{type:"float64",metadata:{default:6,title:"Width 2",description:"Width between tenons (units)"}},holeDistance:{type:"float64",metadata:{default:3,title:"Hole Distance",description:"Distance of mortises from edge (units)"}},play:{type:"float64",metadata:{default:0,title:"Play",description:"Extra space between mortise and tenons (units)"}},thicknessPlay:{type:"float64",metadata:{default:0,title:"Thickness Play",description:"Extra thickness added to mortise holes (units)"}},cornerDistance:{type:"float64",metadata:{default:12,title:"Corner Distance",description:"Reserved space near corners to exclude joints (units)"}},centerDistance:{type:"float64",metadata:{default:0,title:"Center Distance",description:"Reserved space near center to exclude joints (units)"}},mortiseEdge:v(M,{default:null,defaultNotNull:"LegEdge",title:"Mortise Edge"},!0)},metadata:{order:["invert","width1","tenonLength","width2","holeDistance","play","thicknessPlay","cornerDistance","centerDistance","mortiseEdge"]}}}jointThickness(t,e,n,{tenonLength:r,invert:a,mortiseEdge:o}){if(e!==a){if(o){const e=M.find((t=>t.name()===o.kind));if(!e)throw new Error("Invalid mortise edge");return e.thickness(t,n,o.params)}return 0}return r*n}jointDraw(t,e,n,r,{invert:a,width1:o,tenonLength:s,width2:i,holeDistance:h,play:c,thicknessPlay:u,cornerDistance:f,centerDistance:g,mortiseEdge:m}){const p=n!==a,w=p?-c:c;let b=t=>{},k=()=>{},y=()=>{};const v=t=>{if(t>1e4)throw new Error("Too many fingers");k();for(let e=0;e<t;e++)y(),k()};if(p){const n=r+2*u,a=d(t.border.cursor()),s=t.border.angle;if(l(a,s+90,h+n-u),m){const n=M.find((t=>t.name()===m.kind));if(!n)throw new Error("Invalid mortise edge");n.draw(t,e,r,m.params)}else t.border.forward(e);b=t=>{l(a,s,t)},k=()=>{b(w/2),t.hole(d(a),s).forward(o-w).turn(-90).forward(n).turn(-90).forward(o-w).turn(-90).forward(n).turn(-90),b(-w/2),b(o)},y=()=>{b(i)}}else{const e=s*r,n=90;b=e=>t.border.forward(e),k=()=>t.border.forward(w/2).turn(-n).forward(e).turn(n).forward(o-w).turn(n).forward(e).turn(-n).forward(w/2),y=()=>t.border.forward(i)}const x=e-2*f;if(g>0){const t=(x-g)/2,e=Math.floor((t-o)/(o+i)),n=o+e*(o+i);b(f+(t-n)/2),v(e),b(g+t-n),v(e),b(f+(t-n)/2)}else{const t=Math.floor((x-o)/(o+i)),e=o+t*(o+i);b(f+(x-e)/2),v(t),b(f+(x-e)/2)}}}const D=[new b,new k,new y,new x],B=[new b,new k,new x];function E(t={},e){return v(D,t,e)}class T extends t{name(){return"Rectangle"}schema(){return{properties:{label:{type:"string",nullable:!0,metadata:{default:null,defaultNotNull:"",nullHint:"none",title:"Label"}},labelFontSize:{type:"float64",nullable:!0,metadata:{default:null,defaultNotNull:10,nullHint:"auto",title:"Label Font Size (units)"}},thickness:{type:"float64",nullable:!0,metadata:{default:null,defaultNotNull:3,nullHint:"default",title:"Material Thickness (units)"}},kerf:{type:"float64",nullable:!0,metadata:{default:null,defaultNotNull:.1,nullHint:"default",title:"Kerf (units)",description:"Thickness of material removed by cutting tool"}},width:{type:"float64",metadata:{default:100,title:"Outer Width (units)"}},height:{type:"float64",metadata:{default:100,title:"Outer Height (units)"}},edge1:E({title:"Top"}),edge2:E({title:"Right"}),edge3:E({title:"Bottom"}),edge4:E({title:"Left"})},metadata:{order:["label","labelFontSize","thickness","kerf","width","height","edge1","edge2","edge3","edge4"]}}}generate(t,{label:e,labelFontSize:n,thickness:r,kerf:a,width:o,height:s,edge1:i,edge2:d,edge3:l,edge4:h}){const c=new g,u=D.find((t=>t.name()===i.kind));if(!u)throw new Error("Bad top edge");const f=D.find((t=>t.name()===d.kind));if(!f)throw new Error("Bad right edge");const m=D.find((t=>t.name()===l.kind));if(!m)throw new Error("Bad bottom edge");const p=D.find((t=>t.name()===h.kind));if(!p)throw new Error("Bad left edge");const w="number"==typeof r?r:t.defaultThickness,b=u.thickness(o,w,i.params),k=f.thickness(s,w,d.params),y=m.thickness(o,w,l.params),v=p.thickness(s,w,h.params);if(o-=Math.max(0,k)+Math.max(0,v),s-=Math.max(0,b)+Math.max(0,y),v<0&&c.border.forward(-v),u.draw(c,o,w,i.params),k<0&&c.border.forward(-k),c.border.turn(90),b<0&&c.border.forward(-b),f.draw(c,s,w,d.params),y<0&&c.border.forward(-y),c.border.turn(90),k<0&&c.border.forward(-k),m.draw(c,o,w,l.params),v<0&&c.border.forward(-v),c.border.turn(90),y<0&&c.border.forward(-y),p.draw(c,s,w,h.params),b<0&&c.border.forward(-b),c.border.turn(90),e){const t=e.trim().split("\n"),r=t.reduce(((t,e)=>Math.max(t,e.length)),0);let a=0;a="number"==typeof n?n:Math.min((o-5-Math.abs(k)-Math.abs(v))/r*2,(s-5-Math.abs(b)-Math.abs(y))/t.length);const i=a/2,d=(o-i*r)/2,l=(s-a*t.length)/2;for(let e=0;e<t.length;e++){const n=t[e];for(let t=0;t<n.length;t++)c.scoreChar([d+i*t+.15*i,l+a*e+.15*a],.7*i,.7*a,n.charAt(t))}}const M=c.build(t);return"number"==typeof r&&M.setThickness(r),"number"==typeof a&&M.setKerf(a),[M]}}class L extends t{name(){return"BoxNested (WIP)"}schema(){return{properties:{labels:{type:"boolean",metadata:{default:!1,title:"Labels"}},width:{type:"float64",metadata:{default:100,title:"Outer Width (units)"}},depth:{type:"float64",metadata:{default:100,title:"Outer Depth (units)"}},height:{type:"float64",metadata:{default:100,title:"Outer Height (units)"}},holeDistance:{type:"float64",metadata:{default:3,title:"Hole Distance",description:"Distance of mortises from edge (units)"}},play:{type:"float64",metadata:{default:0,title:"Play",description:"Extra space between fingers (units)"}},thicknessPlay:{type:"float64",metadata:{default:0,title:"Thickness Play",description:"Extra thickness added to mortise holes (units)"}}},metadata:{order:["labels","width","depth","height","holeDistance","play","thicknessPlay"]}}}generate(t,{labels:e,width:n,depth:r,height:a,holeDistance:o,play:s,thicknessPlay:i}){const{defaultThickness:d}=t,l=new T,h=(t,e,n)=>({kind:"MortiseAndTenonJoint",params:{invert:t,width1:2*d,tenonLength:e,width2:2*d,holeDistance:o,play:s,thicknessPlay:i,cornerDistance:2*d,centerDistance:0,mortiseEdge:n}}),c=(t,e)=>({kind:"BoxJoint",params:{invert:t,width1:2*d,length1:e,width2:2*d,length2:e,play:s,cornerDistance:2*d,centerDistance:0}});return[...l.generate(t,{width:n,height:r,edge1:h(!1,2),edge2:h(!1,1),edge3:h(!1,2),edge4:h(!1,1),...e?{label:"Bottom"}:{}}),...l.generate(t,{width:r,height:a,edge1:{kind:"ButtJoint",params:{invert:!1,length1:0,length2:1}},edge2:c(!1,2),edge3:h(!0,1),edge4:c(!1,2),...e?{label:"Left"}:{}}),...l.generate(t,{width:r,height:a,edge1:{kind:"ButtJoint",params:{invert:!1,length1:0,length2:1}},edge2:c(!1,2),edge3:h(!0,1),edge4:c(!1,2),...e?{label:"Right"}:{}}),...l.generate(t,{width:n,height:a,edge1:{kind:"ButtJoint",params:{invert:!1,length1:0,length2:1}},edge2:c(!0,1),edge3:h(!0,1),edge4:c(!0,1),...e?{label:"Front"}:{}}),...l.generate(t,{width:n,height:a,edge1:{kind:"ButtJoint",params:{invert:!1,length1:0,length2:1}},edge2:c(!0,1),edge3:h(!0,1,{kind:"LegEdge",params:{flatWidth:.1,curveWidth:.15,curveAmount:.05,height:10}}),edge4:c(!0,1),...e?{label:"Inner Front"}:{}}),...l.generate(t,{width:n,height:a,edge1:{kind:"ButtJoint",params:{invert:!1,length1:0,length2:1}},edge2:c(!0,1),edge3:h(!0,1),edge4:c(!0,1),...e?{label:"Back"}:{}}),...l.generate(t,{width:n,height:a,edge1:{kind:"ButtJoint",params:{invert:!1,length1:0,length2:1}},edge2:c(!0,1),edge3:h(!0,1,{kind:"LegEdge",params:{flatWidth:.1,curveWidth:.15,curveAmount:.05,height:10}}),edge4:c(!0,1),...e?{label:"Inner Back"}:{}})]}}class C extends t{name(){return"BoxPlain"}schema(){return{properties:{labels:{type:"boolean",metadata:{default:!1,title:"Labels"}},width:{type:"float64",metadata:{default:100,title:"Outer Width (units)"}},depth:{type:"float64",metadata:{default:100,title:"Outer Depth (units)"}},height:{type:"float64",metadata:{default:100,title:"Outer Height (units)"}},holeDistance:{type:"float64",metadata:{default:3,title:"Hole Distance",description:"Distance of mortises from edge (units)"}},play:{type:"float64",metadata:{default:0,title:"Play",description:"Extra space between fingers (units)"}},thicknessPlay:{type:"float64",metadata:{default:0,title:"Thickness Play",description:"Extra thickness added to mortise holes (units)"}}},metadata:{order:["labels","width","depth","height","holeDistance","play","thicknessPlay"]}}}generate(t,{labels:e,width:n,depth:r,height:a,holeDistance:o,play:s,thicknessPlay:i}){const{defaultThickness:d}=t,l=new T,h=t=>({kind:"MortiseAndTenonJoint",params:{invert:t,width1:2*d,tenonLength:1,width2:2*d,holeDistance:o,play:s,thicknessPlay:i,cornerDistance:2*d,centerDistance:0}}),c=t=>({kind:"BoxJoint",params:{invert:t,width1:2*d,length1:1,width2:2*d,length2:1,play:s,cornerDistance:2*d,centerDistance:0}});return[...l.generate(t,{width:n,height:r,edge1:h(!1),edge2:h(!1),edge3:h(!1),edge4:h(!1),...e?{label:"Bottom"}:{}}),...l.generate(t,{width:r,height:a,edge1:{kind:"ButtJoint",params:{invert:!1,length1:0,length2:1}},edge2:c(!1),edge3:h(!0),edge4:c(!1),...e?{label:"Left"}:{}}),...l.generate(t,{width:r,height:a,edge1:{kind:"ButtJoint",params:{invert:!1,length1:0,length2:1}},edge2:c(!1),edge3:h(!0),edge4:c(!1),...e?{label:"Right"}:{}}),...l.generate(t,{width:n,height:a,edge1:{kind:"ButtJoint",params:{invert:!1,length1:0,length2:1}},edge2:c(!0),edge3:h(!0),edge4:c(!0),...e?{label:"Front"}:{}}),...l.generate(t,{width:n,height:a,edge1:{kind:"ButtJoint",params:{invert:!1,length1:0,length2:1}},edge2:c(!0),edge3:h(!0),edge4:c(!0),...e?{label:"Back"}:{}})]}}class P extends t{name(){return"KerfTester"}schema(){return{properties:{labels:{type:"boolean",metadata:{default:!0,title:"Labels"}},width:{type:"float64",metadata:{default:30,title:"Outer Width (units)"}},height:{type:"float64",metadata:{default:15,title:"Outer Height (units)"}},play:{type:"float64",metadata:{default:0,title:"Play",description:"Extra space between fingers (units)"}},testCount:{type:"int32",metadata:{default:8,title:"Number of tests"}},kerfStart:{type:"float64",metadata:{default:.08,title:"Kerf start value (units)"}},kerfIncrement:{type:"float64",metadata:{default:.02,title:"Kerf increment value (per test)"}}},metadata:{order:["labels","width","height","play","testCount","kerfStart","kerfIncrement"]}}}generate(t,{labels:e,width:n,height:r,play:a,testCount:o,kerfStart:s,kerfIncrement:i}){const{defaultThickness:d}=t,l=new T,h=t=>({kind:"BoxJoint",params:{invert:t,width1:2*d,length1:1,width2:2*d,length2:1,play:a,cornerDistance:2*d,centerDistance:0}}),c=[];for(let a=0;a<o;a++){const o=s+a*i;c.push(...l.generate(t,{width:n,height:r,kerf:o,edge1:h(!1),edge2:{kind:"ButtJoint",params:{invert:!1,length1:0,length2:1}},edge3:{kind:"ButtJoint",params:{invert:!1,length1:0,length2:1}},edge4:{kind:"ButtJoint",params:{invert:!1,length1:0,length2:1}},...e?{label:o.toFixed(3)}:{}}),...l.generate(t,{width:n,height:r,kerf:o,edge1:{kind:"ButtJoint",params:{invert:!1,length1:0,length2:1}},edge2:{kind:"ButtJoint",params:{invert:!1,length1:0,length2:1}},edge3:h(!0),edge4:{kind:"ButtJoint",params:{invert:!1,length1:0,length2:1}},...e?{label:o.toFixed(3)}:{}}))}return c}}const S=[new m,new L,new C,new P,new T];class ${constructor(t){}}class W extends ${constructor(t){super(t),this.surfaces=[],this.settings=t}addSurface(t,e,n,r,a){this.surfaces.push({offset:t,surface:e,cutColor:n,holeColor:r,scoreColor:a})}toFile(){const{units:t}=this.settings,e=[[0,0],[0,0]];for(const{offset:t,surface:n}of this.surfaces){const r=n.borderBoundingBox(),a=n.kerf();e[0][0]=Math.min(e[0][0],t[0]+r[0][0]-a-10),e[0][1]=Math.min(e[0][1],t[1]+r[0][1]-a-10),e[1][0]=Math.max(e[1][0],t[0]+r[1][0]+a+10),e[1][1]=Math.max(e[1][1],t[1]+r[1][1]+a+10)}const n=[],r=t=>""+Math.round(1e3*t)/1e3;let a=0;const o=()=>{n.push(`<g id="p-${a++}" style="fill:none;stroke-linecap:round;stroke-linejoin:round;">`)},s=()=>{n.push("</g>")},i=(t,e,a,o,s)=>{o&&t>0&&({offset:e,commands:a}=c(e,a,t));const i=[`M${r(e[0])} ${r(e[1])}`];for(const t of a)switch(t.kind){case"L":i.push(`L${r(e[0]+t.to[0])} ${r(e[1]+t.to[1])}`);break;case"C":i.push(`C${r(e[0]+t.c1[0])} ${r(e[1]+t.c1[1])}`,` ${r(e[0]+t.c2[0])} ${r(e[1]+t.c2[1])}`,` ${r(e[0]+t.to[0])} ${r(e[1]+t.to[1])}`)}o&&i.push("Z"),n.push(`<path stroke="${s}" stroke-width="${t<=0?.1:t}" d="${i.join("")}" />`)};for(const{offset:t,surface:e,cutColor:n,holeColor:r,scoreColor:a}of this.surfaces){const d=e.kerf();if((e.scores.length>0||e.holes.length>0)&&o(),e.scores.length>0){o();for(const n of e.scores)i(d,[t[0]+n.offset[0],t[1]+n.offset[1]],n.commands,!1,a);s()}o(),i(d,t,e.border,!0,n);for(const r of e.cuts)i(d,[t[0]+r.offset[0],t[1]+r.offset[1]],r.commands,!1,n);if(s(),e.holes.length>0){o();for(const n of e.holes)i(d,[t[0]+n.offset[0],t[1]+n.offset[1]],n.commands,!0,r);s()}(e.scores.length>0||e.holes.length>0)&&s()}const d=e[1][0]-e[0][0],l=e[1][1]-e[0][1];return{mimeType:"image/svg+xml",extension:".svg",data:(new TextEncoder).encode(`<?xml version='1.0' encoding='utf-8'?>\n<svg\n  width="${r(d)}${t}"\n  height="${r(l)}${t}"\n  viewBox="${r(e[0][0])} ${r(e[0][1])} ${r(d)} ${r(l)}"\n  xmlns="http://www.w3.org/2000/svg">\n\x3c!--\nGenerated by boxburner\nby Sean Connelly (@velipso), https://sean.fun\nProject Home: https://github.com/velipso/boxburner\nSPDX-License-Identifier: 0BSD\n--\x3e\n${n.join("")}\n</svg>`)}}}function I(t){const{fileFormat:e}=t;if("svg"===e)return new W(t);throw new Error(`Unknown export file format: ${e}`)}export{s as AlongIntersection,m as BoxCardstock,b as BoxJoint,L as BoxNested,C as BoxPlain,k as ButtJoint,$ as DocumentBase,W as DocumentSVG,u as DrawBuilder,p as EdgeBase,t as GeneratorBase,w as JointBase,P as KerfTester,x as MortiseAndTenonJoint,T as Rectangle,o as SettingsTypeDef,a as Surface,g as SurfaceBuilder,D as allEdges,E as allEdgesTypeDef,S as allGenerators,B as allJoints,d as copyVec2,v as edgeListTypeDef,i as eps,c as expandPathByKerf,I as exportDocument,l as forwardVec2,h as linesIntersect};
