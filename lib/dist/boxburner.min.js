class t{}function e(t,e){if(e.length<=0)throw new Error(`${t}: Cannot have empty list of commands for closed path`);const n=e[e.length-1].to;if(0!==n[0]||0!==n[1])throw new Error(`${t}: Closed path must end on [0, 0]`)}function n(t){let e=0;for(let n=0;n<t.length;n++){const r=t[n].to,s=t[(n+1)%t.length].to;e+=(s[0]-r[0])*(s[1]+r[1])}return e<0}function r(t,e,n,r){const s=(s,o)=>t[s]*(1-o)*(1-o)*(1-o)+3*e[s]*o*(1-o)*(1-o)+3*n[s]*o*o*(1-o)+r[s]*o*o*o,o=o=>{const a=3*r[o]-9*n[o]+9*e[o]-3*t[o],i=6*t[o]-12*e[o]+6*n[o],d=3*e[o]-3*t[o];let c=Math.min(t[o],r[o]),h=Math.max(t[o],r[o]);if(Math.abs(a)<=1e-8){const t=-d/i;if(t>0&&t<1){const e=s(o,t);c=Math.min(c,e),h=Math.max(h,e)}}else{const t=i*i-4*a*d;if(t>=0){const e=Math.sqrt(t),n=(-i+e)/(2*a);if(n>0&&n<1){const t=s(o,n);c=Math.min(c,t),h=Math.max(h,t)}const r=(-i-e)/(2*a);if(r>0&&r<1){const t=s(o,r);c=Math.min(c,t),h=Math.max(h,t)}}}return[c,h]},a=o(0),i=o(1);return[[a[0],i[0]],[a[1],i[1]]]}class s{constructor(t,r,s=[],o=[],a=[],i=[]){if(e("Surface border",r),!n(r))throw new Error("Surface border: Points must be in counter-clockwise order for border");for(let t=0;t<s.length;t++){const r=`Surface hole ${t}`;if(e(r,s[t].commands),n(s[t].commands))throw new Error(`${r}: Points must be in clockwise order for holes`)}this.thickness=t,this.border=r,this.holes=s,this.cuts=o,this.scores=a,this.text=i}borderBoundingBox(){return function(t){let e=[0,0],n=[0,0],s=[0,0];for(const o of t){switch(o.kind){case"L":e[0]=Math.min(e[0],o.to[0]),e[1]=Math.min(e[1],o.to[1]),n[0]=Math.max(n[0],o.to[0]),n[1]=Math.max(n[1],o.to[1]);break;case"C":{const t=r(s,o.c1,o.c2,o.to);e[0]=Math.min(e[0],t[0][0]),e[1]=Math.min(e[1],t[0][1]),n[0]=Math.max(n[0],t[1][0]),n[1]=Math.max(n[1],t[1][1]);break}}s=o.to}return[e,n]}(this.border)}}function o(t){return[t[0],t[1]]}function a(t,e,n){return e=(e%360+360)%360,0!==n&&(0===e?t[0]+=n:90===e?t[1]+=n:180===e?t[0]-=n:270===e?t[1]-=n:(t[0]+=n*Math.cos(e*Math.PI/180),t[1]+=n*Math.sin(e*Math.PI/180))),t}const i=1e-7;class d{constructor(){this.commands=[],this.angle=0}cursor(){return this.commands.length<=0?[0,0]:this.commands[this.commands.length-1].to}lineTo(t){var e,n;const r=this.commands[this.commands.length-1];if(r&&"L"===r.kind){const s=null!==(n=null===(e=this.commands[this.commands.length-2])||void 0===e?void 0:e.to)&&void 0!==n?n:[0,0],o=r.to,a=t;if(Math.abs(s[0]-a[0])<i&&Math.abs(s[1]-a[1])<i)return this.commands.pop(),this;const d=s[0]-o[0],c=s[1]-o[1],h=o[0]-a[0],l=o[1]-a[1];if(Math.abs(d*l-h*c)<i)return r.to=t,this}return this.commands.push({kind:"L",to:t}),this}lineToRelative(t){const e=this.cursor();return this.lineTo([e[0]+t[0],e[1]+t[1]])}quadCurveTo(t,e){const n=this.cursor();return this.curveTo([n[0]+2*(t[0]-n[0])/3,n[1]+2*(t[1]-n[1])/3],[e[0]+2*(t[0]-e[0])/3,e[1]+2*(t[1]-e[1])/3],e)}curveTo(t,e,n){return this.commands.push({kind:"C",c1:t,c2:e,to:n}),this}turn(t){return this.angle=((this.angle+t)%360+360)%360,this}forward(t){return 0!==t&&this.lineToRelative(a([0,0],this.angle,t)),this}close(){var t,e;this.lineTo([0,0]);const n=this.commands[0],r=this.commands[this.commands.length-1];if("L"===(null==r?void 0:r.kind)&&"L"===(null==n?void 0:n.kind)){const s=null!==(e=null===(t=this.commands[this.commands.length-2])||void 0===t?void 0:t.to)&&void 0!==e?e:[0,0],o=r.to,a=n.to,d=s[0]-o[0],c=s[1]-o[1],h=o[0]-a[0],l=o[1]-a[1];if(Math.abs(s[0]-a[0])<i&&Math.abs(s[1]-a[1])<i)this.commands.shift();else if(Math.abs(d*l-h*c)>=i)return this;this.commands.pop();for(const t of this.commands)t.to[0]-=s[0],t.to[1]-=s[1],"C"===t.kind&&(t.c1[0]-=s[0],t.c1[1]-=s[1],t.c2[0]-=s[0],t.c2[1]-=s[1])}return this}build(){return this.commands}}class c{constructor(){this.border=new d,this.holes=[],this.cuts=[],this.scores=[],this.text=[]}hole(t,e=0){const n=new d;return n.turn(e),this.holes.push({offset:t,db:n}),n}cut(t,e=0){const n=new d;return n.turn(e),this.cuts.push({offset:t,db:n}),n}score(t,e=0){const n=new d;return n.turn(e),this.scores.push({offset:t,db:n}),n}build(t){return new s(t,this.border.close().build(),this.holes.map((({offset:t,db:e})=>({offset:t,commands:e.close().build()}))),this.cuts.map((({offset:t,db:e})=>({offset:t,commands:e.close().build()}))),this.scores.map((({offset:t,db:e})=>({offset:t,commands:e.close().build()}))),this.text)}}class h{}class l extends h{name(){return"PlainEdge"}schema(){return{properties:{},metadata:{order:[]}}}thickness(t,e,n,r){return 0}draw(t,e,n,r,s){t.border.forward(e)}}class f extends h{name(){return"BoxJointEdge"}schema(){return{properties:{invert:{type:"boolean",metadata:{default:!1,title:"Invert",description:"Swap settings for receiving side"}},width1:{type:"float64",metadata:{default:6,title:"Width 1",description:"Width of finger 1 (units)"}},length1:{type:"float64",metadata:{default:1,title:"Length 1",description:"Length of finger 1 (multiples of material thickness)"}},width2:{type:"float64",metadata:{default:6,title:"Width 2",description:"Width of finger 2 (units)"}},length2:{type:"float64",metadata:{default:1,title:"Length 2",description:"Length of finger 2 (multiples of material thickness)"}},play:{type:"float64",metadata:{default:0,title:"Play",description:"Extra space around fingers (units)"}},cornerDistance:{type:"float64",metadata:{default:12,title:"Corner Distance",description:"Reserved space near corners to exclude fingers (units)"}},centerDistance:{type:"float64",metadata:{default:0,title:"Center Distance",description:"Reserved space near center to exclude fingers (units)"}}},metadata:{order:["invert","width1","length1","width2","length2","play","cornerDistance","centerDistance"]}}}thickness(t,e,{thickness:n},{length1:r,length2:s,invert:o}){return(e!==o?-s:r)*n}draw(t,e,n,{thickness:r},{width1:s,length1:o,width2:a,length2:i,invert:d,play:c,cornerDistance:h,centerDistance:l}){const f=t.border,u=n!==d,m=(u?i:o)*r,p=u?s+c:s-c,g=u?a-c:a+c,w=u?-90:90,b=()=>f.turn(-w).forward(m).turn(w).forward(p).turn(w).forward(m).turn(-w),k=t=>{b();for(let e=0;e<t;e++)f.forward(g),b()},v=e-2*h;if(l>0){const t=(v-l)/2,e=Math.floor((t-s)/(s+a)),n=s+e*(s+a);f.forward(h+(t-n)/2),k(e),f.forward(l+t-n),k(e),f.forward(h+(t-n)/2)}else{const t=Math.floor((v-s)/(s+a)),e=s+t*(s+a);f.forward(h+(v-e)/2),k(t),f.forward(h+(v-e)/2)}}}class u extends h{name(){return"MortiseAndTenonEdge"}schema(){return{properties:{invert:{type:"boolean",metadata:{default:!1,title:"Invert",description:"Swap settings for receiving side"}},width1:{type:"float64",metadata:{default:6,title:"Width 1",description:"Width of tenon (units)"}},tenonLength:{type:"float64",metadata:{default:1,title:"Tenon Length",description:"Length of tenon (multiples of material thickness)"}},width2:{type:"float64",metadata:{default:6,title:"Width 2",description:"Width between tenons (units)"}},holeDistance:{type:"float64",metadata:{default:3,title:"Hole Distance",description:"Distance of mortises from edge (units)"}},play:{type:"float64",metadata:{default:0,title:"Play",description:"Extra space between mortise and tenons (units)"}},thicknessPlay:{type:"float64",metadata:{default:0,title:"Thickness Play",description:"Extra thickness added to mortise holes (units)"}},cornerDistance:{type:"float64",metadata:{default:12,title:"Corner Distance",description:"Reserved space near corners to exclude joints (units)"}},centerDistance:{type:"float64",metadata:{default:0,title:"Center Distance",description:"Reserved space near center to exclude joints (units)"}}},metadata:{order:["invert","width1","tenonLength","width2","holeDistance","play","thicknessPlay","cornerDistance","centerDistance"]}}}thickness(t,e,{thickness:n},{tenonLength:r,invert:s}){return e!==s?0:r*n}draw(t,e,n,{thickness:r},{width1:s,tenonLength:i,width2:d,holeDistance:c,invert:h,play:l,thicknessPlay:f,cornerDistance:u,centerDistance:m}){const p=n!==h,g=p?s+l:s-l,w=p?d-l:d+l;let b=t=>{},k=()=>{},v=()=>{};const M=t=>{k();for(let e=0;e<t;e++)v(),k()};if(p){const n=r+2*f,s=o(t.border.cursor()),i=t.border.angle;a(s,i+90,c+n-f),t.border.forward(e),b=t=>{a(s,i,t)},k=()=>{t.hole(o(s),i).forward(g).turn(-90).forward(n).turn(-90).forward(g).turn(-90).forward(n).turn(-90),b(g)},v=()=>b(w)}else{const e=i*r,n=90;b=e=>t.border.forward(e),k=()=>t.border.turn(-n).forward(e).turn(n).forward(g).turn(n).forward(e).turn(-n),v=()=>t.border.forward(w)}const y=e-2*u;if(m>0){const t=(y-m)/2,e=Math.floor((t-s)/(s+d)),n=s+e*(s+d);b(u+(t-n)/2),M(e),b(m+t-n),M(e),b(u+(t-n)/2)}else{const t=Math.floor((y-s)/(s+d)),e=s+t*(s+d);b(u+(y-e)/2),M(t),b(u+(y-e)/2)}}}const m=[new l,new f,new u];function p(t={}){return{discriminator:"kind",mapping:m.map((t=>({[t.name()]:{properties:{kind:{type:"string",metadata:{default:t.name(),title:t.name()}},params:t.schema()},metadata:{order:["params"],untabParams:!0}}}))).reduce(((t,e)=>({...t,...e})),{}),metadata:{default:m[0].name(),order:m.map((t=>t.name())),...t}}}class g extends t{name(){return"PlainRectangle"}schema(){return{properties:{width:{type:"float64",metadata:{default:100,title:"Outer Width (units)"}},height:{type:"float64",metadata:{default:100,title:"Outer Height (units)"}},edge1:p({title:"Top"}),edge2:p({title:"Right"}),edge3:p({title:"Bottom"}),edge4:p({title:"Left"})},metadata:{order:["width","height","edge1","edge2","edge3","edge4"]}}}generate(t,{width:e,height:n,edge1:r,edge2:s,edge3:o,edge4:a}){const{thickness:i}=t,d=new c,h=m.find((t=>t.name()===r.kind));if(!h)throw new Error("Bad top edge");const l=m.find((t=>t.name()===s.kind));if(!l)throw new Error("Bad right edge");const f=m.find((t=>t.name()===o.kind));if(!f)throw new Error("Bad bottom edge");const u=m.find((t=>t.name()===a.kind));if(!u)throw new Error("Bad left edge");const p=h.thickness(e,!1,t,r.params),g=l.thickness(n,!1,t,s.params),w=f.thickness(e,!1,t,o.params),b=u.thickness(n,!1,t,a.params);return e-=Math.abs(g)+Math.abs(b),n-=Math.abs(p)+Math.abs(w),b<0&&d.border.forward(-b),h.draw(d,e,!1,t,r.params),g<0&&d.border.forward(-g),d.border.turn(90),p<0&&d.border.forward(-p),l.draw(d,n,!1,t,s.params),w<0&&d.border.forward(-w),d.border.turn(90),g<0&&d.border.forward(-g),f.draw(d,e,!1,t,o.params),b<0&&d.border.forward(-b),d.border.turn(90),w<0&&d.border.forward(-w),u.draw(d,n,!1,t,a.params),p<0&&d.border.forward(-p),d.border.turn(90),[d.build(i)]}}const w=[new g];class b{constructor(t){}}class k extends b{constructor(t){super(t),this.surfaces=[],this.settings=t}addSurface(t,e,n,r,s){this.surfaces.push({offset:t,surface:e,cutColor:n,holeColor:r,scoreColor:s})}toFile(){const{kerf:t,units:e}=this.settings,n=[[0,0],[0,0]];for(const{offset:e,surface:r}of this.surfaces){const s=r.borderBoundingBox();n[0][0]=Math.min(n[0][0],e[0]+s[0][0]-t-10),n[0][1]=Math.min(n[0][1],e[1]+s[0][1]-t-10),n[1][0]=Math.max(n[1][0],e[0]+s[1][0]+t+10),n[1][1]=Math.max(n[1][1],e[1]+s[1][1]+t+10)}const r=[],s=t=>""+Math.round(1e3*t)/1e3;let o=0;const a=()=>{r.push(`<g id="p-${o++}" style="fill:none;stroke-linecap:round;stroke-linejoin:round;">`)},i=()=>{r.push("</g>")},d=(e,n,o,a)=>{const i=[`M${s(e[0])} ${s(e[1])}`];for(const t of n)switch(t.kind){case"L":i.push(`L${s(e[0]+t.to[0])} ${s(e[1]+t.to[1])}`);break;case"C":i.push(`C${s(e[0]+t.c1[0])} ${s(e[1]+t.c1[1])}`,` ${s(e[0]+t.c2[0])} ${s(e[1]+t.c2[1])}`,` ${s(e[0]+t.to[0])} ${s(e[1]+t.to[1])}`)}o&&i.push("Z"),r.push(`<path stroke="${a}" stroke-width="${t}" d="${i.join("")}" />`)};for(const{offset:t,surface:e,cutColor:n,holeColor:r,scoreColor:s}of this.surfaces){if((e.scores.length>0||e.holes.length>0)&&a(),e.scores.length>0){a();for(const n of e.scores)d([t[0]+n.offset[0],t[1]+n.offset[1]],n.commands,!1,s);i()}a(),d(t,e.border,!0,n);for(const r of e.cuts)d([t[0]+r.offset[0],t[1]+r.offset[1]],r.commands,!1,n);if(i(),e.holes.length>0){a();for(const n of e.holes)d([t[0]+n.offset[0],t[1]+n.offset[1]],n.commands,!0,r);i()}(e.scores.length>0||e.holes.length>0)&&i()}const c=n[1][0]-n[0][0],h=n[1][1]-n[0][1];return{mimeType:"image/svg+xml",extension:".svg",data:(new TextEncoder).encode(`<?xml version='1.0' encoding='utf-8'?>\n<svg\n  width="${s(c)}${e}"\n  height="${s(h)}${e}"\n  viewBox="${s(n[0][0])} ${s(n[0][1])} ${s(c)} ${s(h)}"\n  xmlns="http://www.w3.org/2000/svg">\n\x3c!--\nGenerated by boxburner\nby Sean Connelly (@velipso), https://sean.fun\nProject Home: https://github.com/velipso/boxburner\nSPDX-License-Identifier: 0BSD\n--\x3e\n${r.join("")}\n</svg>`)}}}function v(t){if("svg"===t.fileFormat)return new k(t);throw new Error(`Unknown export file format: ${t.fileFormat}`)}const M={properties:{thickness:{type:"float64",metadata:{default:3,title:"Material Thickness (units)"}},kerf:{type:"float64",metadata:{default:.1,title:"Kerf",description:"Thickness of material removed by cutting tool (units)"}},units:{enum:["mm","in"],metadata:{default:"mm",title:"Units"}},fileFormat:{enum:["svg"],metadata:{default:"svg",title:"File Format"}},debug:{type:"boolean",metadata:{default:!1,title:"Debug"}}},metadata:{title:"Settings",order:["thickness","kerf","units","fileFormat","debug"],startHidden:!0}};export{f as BoxJointEdge,b as DocumentBase,k as DocumentSVG,d as DrawBuilder,h as EdgeBase,t as GeneratorBase,u as MortiseAndTenonEdge,l as PlainEdge,g as PlainRectangle,M as SettingsTypeDef,s as Surface,c as SurfaceBuilder,m as allEdges,p as allEdgesTypeDef,w as allGenerators,o as copyVec2,v as exportDocument,a as forwardVec2};
